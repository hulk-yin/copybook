{"version":3,"sources":["matts.js","App.js","serviceWorker.js","index.js"],"names":["Copybook","this","drawWord","oldProps","ctx","save","some","name","props","size","restore","clearRect","type","word","children","drawMWord","drawMatts","setWord","strokeStyle","strokeRect","setLineDash","moveTo","lineTo","stroke","beginPath","font","textAlign","textBaseline","fillText","height","width","ref","canvas","getContext","React","Component","App","useState","str","setWords","setSize","setType","setFont","useEffect","document","fonts","check","fontInterval","setInterval","requestAnimationFrame","clearInterval","words","split","className","onClick","Math","max","min","value","onChange","e","target","label","fontname","offset","x","y","map","item","key","defaultValue","placeholder","i","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.46c6fcaf.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Copybook extends React.Component {\n    componentDidMount() {\n        this.drawWord();\n    }\n    componentDidUpdate(oldProps) {\n        this.ctx.save();\n        const propNames = [\"children\", \"size\", 'type', \"font\"]\n        if (propNames.some((name) => oldProps[name] !== this.props[name])) {\n            this.drawWord();\n        }\n    }\n    drawWord() {\n        const { size } = this.props\n        this.ctx.restore();\n        this.ctx.clearRect(0, 0, size, size);\n        const { type, children: word, } = this.props;\n        switch (type) {\n            case \"mi\":\n                this.drawMWord();\n                break;\n            default:\n                this.drawMatts();\n        }\n        this.setWord(word);\n\n    }\n    drawMatts() {\n        const { size } = this.props\n        var ctx = this.ctx;\n        ctx.strokeStyle = \"#0000ff\";\n        ctx.strokeRect(1, 1, size - 2, size - 2);\n        this.ctx.setLineDash([size / 40, size / 40])\n        // ctx.strokeRect(size / 4, size / 4, size / 2, size / 2);\n        ctx.moveTo(size / 2, 0);\n        ctx.lineTo(size / 2, size);\n        ctx.stroke();\n        ctx.moveTo(0, size / 2);\n        ctx.lineTo(size, size / 2);\n        ctx.stroke();\n    }\n    drawArc() {\n        const { size } = this.props\n        this.drawMWord();\n        this.ctx.moveTo(size / 2, size / 2);\n        // this.ctx.arc(100,100,70,0,2*Math.PI);\n        this.ctx.stroke();\n    }\n    drawMWord() {\n        const { size } = this.props\n        this.drawMatts();\n        this.ctx.setLineDash([size / 40, size / 40])\n        this.ctx.beginPath();\n        this.ctx.moveTo(0, 0);\n        this.ctx.lineTo(size, size);\n        this.ctx.stroke();\n        this.ctx.moveTo(0, size);\n        this.ctx.lineTo(size, 0);\n        this.ctx.stroke();\n    }\n    setWord(word) {\n        const { size, font } = this.props\n        this.ctx.textAlign = \"center\"\n        this.ctx.textBaseline = \"middle\"\n        this.ctx.font = size * 0.7 + \"px \" + font;\n        this.ctx.fillText(word, size / 2, size / 2 * 1.09);\n    }\n\n    render() {\n        const { size } = this.props\n        return <canvas height={size} width={size}\n            ref={(canvas) => {\n                if (canvas)\n                    this.ctx = canvas.getContext(\"2d\")\n            }}\n        ></canvas >\n    }\n}\n","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport './font.css';\nimport Matts from './matts';\nfunction App() {\n  const [str, setWords] = useState(\"春风冬雪花飞入\");\n  const [size, setSize] = useState(60);\n  const [type, setType] = useState(\"tian\");\n  const [font, setFont] = useState(\"FZKTJW\");\n\n  useEffect(() => {\n    const isLoad = document.fonts.check(size * 0.7 + \"px \" + font)\n    if (!isLoad) {\n      const fontInterval = setInterval(() => {\n        const isLoad = document.fonts.check(size * 0.7 + \"px \" + font)\n        if (isLoad) {\n          setWords(\"\");\n          requestAnimationFrame(() => {\n            setWords(str);\n          })\n          clearInterval(fontInterval)\n        }\n      }, 100)\n    }\n\n  })\n  const words = str.split(\"\");\n  const fonts = [{\n    label: \"方正楷体简体\",\n    fontname: \"FZKTJW\",\n    offset: { x: 1, y: 1.09 }\n  }, {\n    label: \"方正新楷体简体\",\n    fontname: \"FZXKTJW\"\n  }, {\n    label: \"书体坊王羲之楷\",\n    fontname: \"STFWXZKJW\"\n  }, {\n    label: \"方正手迹-丁谦硬笔楷书\",\n    fontname: \"FZSJ-DQYBKSJW\"\n  }]\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <button\n            onClick={() => setSize(Math.max(30, size - 10))}\n          >-</button>{size}<button\n            onClick={() => setSize(Math.min(300, size + 10))}\n          >+</button>\n          &nbsp;\n          &nbsp;\n          <button\n            onClick={() => {\n              setWords(\"\");\n              setType('tian')\n              requestAnimationFrame(() => {\n                setWords(str);\n              })\n            }}\n          >田字格</button>\n          <button\n            onClick={() => {\n              setWords(\"\");\n              setType('mi')\n              requestAnimationFrame(() => {\n                setWords(str);\n              })\n            }}\n          >米字格</button>\n          选择字体\n          <select\n            value={font}\n            onChange={(e) => {\n              setWords(\"\");\n              setFont(e.target.value)\n              requestAnimationFrame(() => {\n                setWords(str);\n              })\n            }}\n          >\n            {fonts.map((item) => (<option\n              key={item.fontname}\n              // selected={font === item.fontname}\n              value={item.fontname}\n            >\n              {item.label}\n            </option>))}\n          </select>\n        </div>\n        <input className=\"words-input\"\n          defaultValue={str}\n          placeholder=\"在这里输入要生成字体的文字\"\n          onChange={(e) => {\n            setWords(e.target.value)\n          }}>\n        </input>\n      </header>\n      <div className=\"copybook-page\">\n        {words.map((word, i) => <Matts type={type} font={font} size={size} key={i}>{word}</Matts>)}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}